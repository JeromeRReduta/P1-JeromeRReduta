<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="task__adder_8h" kind="file" language="C++">
    <compoundname>task_adder.h</compoundname>
    <includedby refid="task__adder_8c" local="yes">task_adder.c</includedby>
    <includedby refid="task__finder_8h" local="yes">task_finder.h</includedby>
    <invincdepgraph>
      <node id="1">
        <label>task_adder.h</label>
        <link refid="task__adder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>os_searcher.h</label>
        <link refid="os__searcher_8h_source"/>
      </node>
      <node id="2">
        <label>task_finder.h</label>
        <link refid="task__finder_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structTask__Status__File__Info" prot="public">Task_Status_File_Info</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="task__adder_8h_1abf3cf65b4fcbbaf2a4576f85be1be568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_read_status_and_store_into</definition>
        <argsstring>(char *proc_dir, char *entry_name, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_read_status_and_store_into</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry_name</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Reads info from proc_dir/entry_name/status and populates status_file_info with the info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_name</parametername>
</parameternamelist>
<parameterdescription>
<para>entry name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if both tasks succeed, otherwise -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.h" line="24" column="5" bodyfile="task_adder.c" bodystart="43" bodyend="47" declfile="task_adder.h" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8h_1ae2d0cbb472f570e092d6aabe572e09bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_populate_task_stats_with</definition>
        <argsstring>(struct task_stats *stats, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_populate_task_stats_with</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Given info about one task from status_file info, adds that one task to stats. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.h" line="25" column="6" bodyfile="task_adder.c" bodystart="77" bodyend="91" declfile="task_adder.h" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8h_1a465a7dad132a402a590dc223fd16b1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_destroy_status_file_info</definition>
        <argsstring>(Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_destroy_status_file_info</name>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Destroys <ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct, including freeing allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.h" line="26" column="6" bodyfile="task_adder.c" bodystart="193" bodyend="199" declfile="task_adder.h" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8h_1ae8b006cd447a3a0ffb6f99020565fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_log_status_file_info</definition>
        <argsstring>(Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_log_status_file_info</name>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Convenience function, for debugging. Logs all the information in a <ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.h" line="27" column="6" bodyfile="task_adder.c" bodystart="206" bodyend="220" declfile="task_adder.h" declline="27" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_TASK_ADDER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_TASK_ADDER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="structTask__Status__File__Info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pid_buf[256];</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>uid_buf[256];</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name_buf[256];</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state_buf[256];</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pid_token;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uid_token;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name_token;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>state_token;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__stats" kindref="compound">task_stats</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_read_status_and_store_into(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entry_name,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_populate_task_stats_with(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_destroy_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_log_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="task_adder.h"/>
  </compounddef>
</doxygen>
