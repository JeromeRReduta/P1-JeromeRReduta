<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="cpu__usage_8h" kind="file" language="C++">
    <compoundname>cpu_usage.h</compoundname>
    <includedby refid="cpu__usage_8c" local="yes">cpu_usage.c</includedby>
    <includedby refid="procfs_8c" local="yes">procfs.c</includedby>
      <sectiondef kind="var">
      <memberdef kind="variable" id="cpu__usage_8h_1a96d028fce66ee01d1d98d8fa43ede4c5" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref></type>
        <definition>struct cpu_stats curr</definition>
        <argsstring></argsstring>
        <name>curr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpu_usage.h" line="1" column="0" declfile="cpu_usage.h" declline="1" declcolumn="0"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cpu__usage_8h_1a1032f831df0306d33b28784894ea0ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cpu_init</definition>
        <argsstring>(char *proc_dir, struct cpu_stats *curr)</argsstring>
        <name>cpu_init</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
<para>Initalizes <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curr</parametername>
</parameternamelist>
<parameterdescription>
<para>current <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpu_usage.h" line="12" column="6" bodyfile="cpu_usage.c" bodystart="35" bodyend="44" declfile="cpu_usage.h" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="cpu__usage_8h_1a68581dee15e124c8c0f0002fb6710886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double cpu_calc_usage</definition>
        <argsstring>(struct cpu_stats *prev, struct cpu_stats *curr)</argsstring>
        <name>cpu_calc_usage</name>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
<para>Calculates cpu usage. If given invalid values, returns 0.0 instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>previous <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct from the previous <ref refid="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" kindref="member">pfs_cpu_usage()</ref> call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curr</parametername>
</parameternamelist>
<parameterdescription>
<para>current <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct from this <ref refid="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" kindref="member">pfs_cpu_usage()</ref> call</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The cpu_usage, defined as 1 - (curr-&gt;idle - prev-&gt;idle) / (curr-&gt;total - prev-&gt;total). If given invalid values, will return 0 instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpu_usage.h" line="13" column="8" bodyfile="cpu_usage.c" bodystart="102" bodyend="109" declfile="cpu_usage.h" declline="13" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="cpu__usage_8h_1aa08626f5645a9fa1e4baed16df23d65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cpu_log_info</definition>
        <argsstring>(struct cpu_stats *curr)</argsstring>
        <name>cpu_log_info</name>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
<para>Convienience function, for logging info in a <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>curr</parametername>
</parameternamelist>
<parameterdescription>
<para>current <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="cpu_usage.h" line="14" column="6" bodyfile="cpu_usage.c" bodystart="116" bodyend="122" declfile="cpu_usage.h" declline="14" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_CPU_USAGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CPU_USAGE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Apparently<sp/>if<sp/>I<sp/>do<sp/>this<sp/>a<sp/>compiler<sp/>warning<sp/>goes<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Based<sp/>on<sp/>advice<sp/>from<sp/>https://stackoverflow.com/questions/16831605/strange-compiler-warning-c-warning-struct-declared-inside-parameter-list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>curr;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cpu_init(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*curr);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cpu_calc_usage(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*prev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*curr);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cpu_log_info(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*curr);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="cpu_usage.h"/>
  </compounddef>
</doxygen>
