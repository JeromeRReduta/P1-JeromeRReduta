<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="procfs_8h" kind="file" language="C++">
    <compoundname>procfs.h</compoundname>
    <includes local="no">sys/types.h</includes>
    <includedby refid="cpu__usage_8c" local="yes">cpu_usage.c</includedby>
    <includedby refid="display_8c" local="yes">display.c</includedby>
    <includedby refid="mem__usage_8c" local="yes">mem_usage.c</includedby>
    <includedby refid="os__searcher_8c" local="yes">os_searcher.c</includedby>
    <includedby refid="procfs_8c" local="yes">procfs.c</includedby>
    <includedby refid="task__adder_8c" local="yes">task_adder.c</includedby>
    <includedby refid="task__finder_8c" local="yes">task_finder.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>procfs.h</label>
        <link refid="procfs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys/types.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structload__avg" prot="public">load_avg</innerclass>
    <innerclass refid="structcpu__stats" prot="public">cpu_stats</innerclass>
    <innerclass refid="structmem__stats" prot="public">mem_stats</innerclass>
    <innerclass refid="structtask__stats" prot="public">task_stats</innerclass>
    <innerclass refid="structtask__info" prot="public">task_info</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="procfs_8h_1afd9a22056f1c44f1b54a027f8ecbd9f0" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_hostname_path</definition>
        <argsstring></argsstring>
        <name>pfs_hostname_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="14" column="19" bodyfile="procfs.c" bodystart="15" bodyend="-1" declfile="procfs.h" declline="14" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1a3507902b66fb540089ee21538152cea6" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_kernel_path</definition>
        <argsstring></argsstring>
        <name>pfs_kernel_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="15" column="19" bodyfile="procfs.c" bodystart="16" bodyend="-1" declfile="procfs.h" declline="15" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1acb7648d462c6d9c35d975d714fbaf024" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_cpu_path</definition>
        <argsstring></argsstring>
        <name>pfs_cpu_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="16" column="19" bodyfile="procfs.c" bodystart="17" bodyend="-1" declfile="procfs.h" declline="16" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1add3458c3d4c21b46951e9ef542c86466" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_uptime_path</definition>
        <argsstring></argsstring>
        <name>pfs_uptime_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="17" column="19" bodyfile="procfs.c" bodystart="18" bodyend="-1" declfile="procfs.h" declline="17" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1af0d75f52326f164ec46e548b484e83ee" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_load_avg_path</definition>
        <argsstring></argsstring>
        <name>pfs_load_avg_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="18" column="19" bodyfile="procfs.c" bodystart="19" bodyend="-1" declfile="procfs.h" declline="18" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1a6d831d891f49984ceffa98b912145146" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_cpu_usage_path</definition>
        <argsstring></argsstring>
        <name>pfs_cpu_usage_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="19" column="19" bodyfile="procfs.c" bodystart="20" bodyend="-1" declfile="procfs.h" declline="19" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="procfs_8h_1acadad8b63aada1a4e3fa8c69cb1a3155" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* pfs_mem_usage_path</definition>
        <argsstring></argsstring>
        <name>pfs_mem_usage_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="20" column="19" bodyfile="procfs.c" bodystart="21" bodyend="-1" declfile="procfs.h" declline="20" declcolumn="19"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="procfs_8h_1acb1112f87eb6d7023b4bc2adccebb75e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_hostname</definition>
        <argsstring>(char *proc_dir, char *hostname_buf, size_t buf_sz)</argsstring>
        <name>pfs_hostname</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>hostname_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
<para>Copies this OS&apos;s hostname to hostname_buf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostname_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="61" column="5" bodyfile="procfs.c" bodystart="40" bodyend="47" declfile="procfs.h" declline="61" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1aa2daa2378b2816f378f7d8d1cad39371" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_kernel_version</definition>
        <argsstring>(char *proc_dir, char *version_buf, size_t buf_sz)</argsstring>
        <name>pfs_kernel_version</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>version_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
<para>Copies this OS&apos;s kernel version to version_buf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="62" column="5" bodyfile="procfs.c" bodystart="58" bodyend="66" declfile="procfs.h" declline="62" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1aa9d05ac622f7322719bbcf8302c682ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_cpu_model</definition>
        <argsstring>(char *proc_dir, char *model_buf, size_t buf_sz)</argsstring>
        <name>pfs_cpu_model</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>model_buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>buf_sz</declname>
        </param>
        <briefdescription>
<para>Copies this OS&apos;s cpu model to model_buf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>model_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="63" column="5" bodyfile="procfs.c" bodystart="77" bodyend="85" declfile="procfs.h" declline="63" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a9b207290dee3e4fc725a6800ab2813d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_cpu_units</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_cpu_units</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Gets the num of cpu_units. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of cpu_units, or -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="64" column="5" bodyfile="procfs.c" bodystart="94" bodyend="102" declfile="procfs.h" declline="64" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a22f70e07728198887b6f062716183058" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pfs_uptime</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_uptime</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Gets the uptime of this OS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uptime of OS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="65" column="8" bodyfile="procfs.c" bodystart="111" bodyend="118" declfile="procfs.h" declline="65" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a2b539d023054cb32a82cc19e9fe1d977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_format_uptime</definition>
        <argsstring>(double time, char *uptime_buf)</argsstring>
        <name>pfs_format_uptime</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uptime_buf</declname>
        </param>
        <briefdescription>
<para>Formats the OS&apos;s uptime and writes it to uptime_buf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>uptime </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uptime_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>uptime buffer, to write formatted uptime into</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="66" column="5" bodyfile="procfs.c" bodystart="128" bodyend="134" declfile="procfs.h" declline="66" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1ad7cd36585e7dc0dd239d622c60e1df69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structload__avg" kindref="compound">load_avg</ref></type>
        <definition>struct load_avg pfs_load_avg</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>pfs_load_avg</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Creates a struct containing load average values and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structload__avg" kindref="compound">load_avg</ref> struct holding load average values </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="66" column="5" bodyfile="procfs.c" bodystart="143" bodyend="151" declfile="procfs.h" declline="66" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double pfs_cpu_usage</definition>
        <argsstring>(char *procfs_dir, struct cpu_stats *prev, struct cpu_stats *curr)</argsstring>
        <name>pfs_cpu_usage</name>
        <param>
          <type>char *</type>
          <declname>procfs_dir</declname>
          <defname>proc_dir</defname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>prev</declname>
        </param>
        <param>
          <type>struct <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> *</type>
          <declname>curr</declname>
        </param>
        <briefdescription>
<para>calculates this OS&apos;s cpu usage from cpu_usage file </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prev</parametername>
</parameternamelist>
<parameterdescription>
<para>previous <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct, from the last time this function is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curr</parametername>
</parameternamelist>
<parameterdescription>
<para>new <ref refid="structcpu__stats" kindref="compound">cpu_stats</ref> struct, populated when this function is called</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this OS&apos;s cpu usage, or 0 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="72" column="8" bodyfile="procfs.c" bodystart="223" bodyend="227" declfile="procfs.h" declline="72" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a6cde96a5ca78eb0d37fb4c8da3c7e0b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structmem__stats" kindref="compound">mem_stats</ref></type>
        <definition>struct mem_stats pfs_mem_usage</definition>
        <argsstring>(char *procfs_dir)</argsstring>
        <name>pfs_mem_usage</name>
        <param>
          <type>char *</type>
          <declname>procfs_dir</declname>
          <defname>proc_dir</defname>
        </param>
        <briefdescription>
<para>Populates and returns a <ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct with data from meminfo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a populated <ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct with data from meminfo, or NULL on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="72" column="8" bodyfile="procfs.c" bodystart="236" bodyend="241" declfile="procfs.h" declline="72" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a3a7b8e342feb3d2ae29e01279c18087a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
        <definition>struct task_stats* pfs_create_tstats</definition>
        <argsstring>()</argsstring>
        <name>pfs_create_tstats</name>
        <briefdescription>
<para>Initalizes a <ref refid="structtask__stats" kindref="compound">task_stats</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a <ref refid="structtask__stats" kindref="compound">task_stats</ref> struct, used to keep track of all processes in the OS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="78" column="17" bodyfile="procfs.c" bodystart="248" bodyend="251" declfile="procfs.h" declline="78" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1ace1568af21fee77d1ce8b68ac7460e8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pfs_destroy_tstats</definition>
        <argsstring>(struct task_stats *tstats)</argsstring>
        <name>pfs_destroy_tstats</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>tstats</declname>
        </param>
        <briefdescription>
<para>Destroys <ref refid="structtask__stats" kindref="compound">task_stats</ref> data, including freeing allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tstats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="79" column="6" bodyfile="procfs.c" bodystart="258" bodyend="261" declfile="procfs.h" declline="79" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="procfs_8h_1a78c77e940f997164cfe044717b5ce2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pfs_tasks</definition>
        <argsstring>(char *proc_dir, struct task_stats *tstats)</argsstring>
        <name>pfs_tasks</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>tstats</declname>
        </param>
        <briefdescription>
<para>Returns the number of tasks/processes in this OS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tstats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0, for success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="procfs.h" line="81" column="5" bodyfile="procfs.c" bodystart="271" bodyend="275" declfile="procfs.h" declline="81" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Retrieves raw information from procfs, parses it, and provides easy-to-use functions for displaying the data. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_PROCFS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_PROCFS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constants<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_hostname_path;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_kernel_path;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_cpu_path;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_uptime_path;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_load_avg_path;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_cpu_usage_path;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pfs_mem_usage_path;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="structload__avg" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structload__avg" kindref="compound">load_avg</ref><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>one;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>five;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fifteen;</highlight></codeline>
<codeline lineno="27"><highlight class="normal">};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="structcpu__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>idle;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="structmem__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>used;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structtask__stats" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>running;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>waiting;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sleeping;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stopped;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>zombie;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active_tasks_size;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>active_tasks_max_len;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>*active_tasks;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structtask__info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>pid_t<sp/>pid;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uid_t<sp/>uid;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[26];</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state[13];</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1acb1112f87eb6d7023b4bc2adccebb75e" kindref="member">pfs_hostname</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*hostname_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1aa2daa2378b2816f378f7d8d1cad39371" kindref="member">pfs_kernel_version</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*version_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1aa9d05ac622f7322719bbcf8302c682ad" kindref="member">pfs_cpu_model</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*model_buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>buf_sz);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a9b207290dee3e4fc725a6800ab2813d6" kindref="member">pfs_cpu_units</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a22f70e07728198887b6f062716183058" kindref="member">pfs_uptime</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a2b539d023054cb32a82cc19e9fe1d977" kindref="member">pfs_format_uptime</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uptime_buf);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structload__avg" kindref="compound">load_avg</ref><sp/><ref refid="procfs_8h_1ad7cd36585e7dc0dd239d622c60e1df69" kindref="member">pfs_load_avg</ref>(char<sp/>*proc_dir);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>&apos;prev&apos;<sp/>is<sp/>an<sp/>input<sp/>that<sp/>represents<sp/>the<sp/>*last*<sp/>CPU<sp/>usage<sp/>state.<sp/>&apos;curr&apos;</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/>*<sp/>is<sp/>an<sp/>*output*<sp/>that<sp/>represents<sp/>the<sp/>current<sp/>CPU<sp/>usage<sp/>state,<sp/>and<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/>*<sp/>passed<sp/>back<sp/>in<sp/>to<sp/>pfs_load_avg<sp/>on<sp/>its<sp/>next<sp/>call.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a866cac2f8014b4c83f23243ab0e01ab3" kindref="member">pfs_cpu_usage</ref>(</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*procfs_dir,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*prev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structcpu__stats" kindref="compound">cpu_stats</ref><sp/>*curr);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/><ref refid="procfs_8h_1a6cde96a5ca78eb0d37fb4c8da3c7e0b4" kindref="member">pfs_mem_usage</ref>(char<sp/>*procfs_dir);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Note:<sp/>these<sp/>two<sp/>functions<sp/>create<sp/>and<sp/>destroy<sp/>task_stats<sp/>structs.<sp/>Depending<sp/>on</highlight></codeline>
<codeline lineno="77"><highlight class="comment"><sp/>*<sp/>your<sp/>implementation,<sp/>this<sp/>might<sp/>just<sp/>be<sp/>a<sp/>malloc/free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*<ref refid="procfs_8h_1a3a7b8e342feb3d2ae29e01279c18087a" kindref="member">pfs_create_tstats</ref>();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1ace1568af21fee77d1ce8b68ac7460e8c" kindref="member">pfs_destroy_tstats</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*tstats);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="procfs_8h_1a78c77e940f997164cfe044717b5ce2e1" kindref="member">pfs_tasks</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*tstats);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="procfs.h"/>
  </compounddef>
</doxygen>
