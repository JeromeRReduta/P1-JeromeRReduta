<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="perc__bar__drawer_8c" kind="file" language="C++">
    <compoundname>perc_bar_drawer.c</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes refid="perc__bar__drawer_8h" local="yes">perc_bar_drawer.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>perc_bar_drawer.c</label>
        <link refid="perc__bar__drawer_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>perc_bar_drawer.h</label>
        <link refid="perc__bar__drawer_8h_source"/>
      </node>
      <node id="6">
        <label>sys/types.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="5">
        <label>util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>unistd.h</label>
      </node>
      <node id="7">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="perc__bar__drawer_8c_1a75fa1b7f896c1bc05d855ce9d9ceeffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_percbar</definition>
        <argsstring>(char *buf, double frac)</argsstring>
        <name>draw_percbar</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frac</declname>
        </param>
        <briefdescription>
<para>Draws the whole percent bar. </para>
        </briefdescription>
        <detaileddescription>
<para>@File file whose sole responsibility is to fill a buffer with percent bar info</para>
<para><linebreak/>
 Percent bar has the following format: <linebreak/>
 <preformatted>
[(20 # or -)] #.#%
</preformatted></para>
<para><linebreak/>
 E.g.: <preformatted>
[####----------------] 20.0%
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to put percent bar in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frac</parametername>
</parameternamelist>
<parameterdescription>
<para>fraction input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="31" column="6" bodyfile="perc_bar_drawer.c" bodystart="31" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="perc__bar__drawer_8c_1a0af12e2913fbc8dbf5f6671eeb07978f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_safe_percent_from</definition>
        <argsstring>(double frac)</argsstring>
        <name>get_safe_percent_from</name>
        <param>
          <type>double</type>
          <declname>frac</declname>
        </param>
        <briefdescription>
<para>Converts frac into a percent. If frac is not a number, or is out of bounds (less than 0.0 or -0.0 or greater than 1.0), gives a default value instead. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">frac</parametername>
</parameternamelist>
<parameterdescription>
<para>The frac</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>frac * 100, or a default value if frac is not a number, or is out of bounds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="49" column="8" bodyfile="perc_bar_drawer.c" bodystart="49" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="perc__bar__drawer_8c_1a5624878d9d46219552e5f07f5cbaff7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_num_of_hashes_from</definition>
        <argsstring>(double safe_percent, int max_hashes)</argsstring>
        <name>get_num_of_hashes_from</name>
        <param>
          <type>double</type>
          <declname>safe_percent</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_hashes</declname>
        </param>
        <briefdescription>
<para>Gets the number of hashes, based of safe_percent and max_hashes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">safe_percent</parametername>
</parameternamelist>
<parameterdescription>
<para>safe percent </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_hashes</parametername>
</parameternamelist>
<parameterdescription>
<para>max hashes</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>safe_percent, rounded to nearest whole number, divided by 100 and multipled by max_hashes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="72" column="5" bodyfile="perc_bar_drawer.c" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="perc__bar__drawer_8c_1a30d2bd6191369aad6876d21dd6ef0880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fill_in_perc_bar</definition>
        <argsstring>(char *buf, Percbar_Info *pb_info)</argsstring>
        <name>fill_in_perc_bar</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> *</type>
          <declname>pb_info</declname>
        </param>
        <briefdescription>
<para>Given <ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> struct, draws the percent bar. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="83" column="6" bodyfile="perc_bar_drawer.c" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="perc__bar__drawer_8c_1a212af0061bc5446d0c557e370edf72c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void make_bar</definition>
        <argsstring>(char *buf, Percbar_Info *pb_info)</argsstring>
        <name>make_bar</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> *</type>
          <declname>pb_info</declname>
        </param>
        <briefdescription>
<para>Writes the. </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted>[###----]</preformatted> part of the percent bar</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="99" column="6" bodyfile="perc_bar_drawer.c" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="perc__bar__drawer_8c_1af8586abbe2c26daaecec5bec42646045" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_percent_string</definition>
        <argsstring>(char *buf, Percbar_Info *pb_info)</argsstring>
        <name>add_percent_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> *</type>
          <declname>pb_info</declname>
        </param>
        <briefdescription>
<para>Writes the. </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted> ab.c% </preformatted> part of the percent bar</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pb_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Found out format for formatted float from <ulink url="https://stackoverflow.com/questions/1343890/how-do-i-restrict-a-float-value-to-only-two-places-after-the-decimal-point-in-c">https://stackoverflow.com/questions/1343890/how-do-i-restrict-a-float-value-to-only-two-places-after-the-decimal-point-in-c</ulink> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="perc_bar_drawer.c" line="116" column="6" bodyfile="perc_bar_drawer.c" bodystart="116" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;perc_bar_drawer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>draw_percbar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frac)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref><sp/>pb_info<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.<ref refid="structPercbar__Info_1ae2af1ac3a5dc152b378711922fce3d26" kindref="member">safe_percent</ref><sp/>=<sp/>get_safe_percent_from(frac),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.max_hashes<sp/>=<sp/>20,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.num_of_hashes<sp/>=<sp/>get_num_of_hashes_from(pb_info.<ref refid="structPercbar__Info_1ae2af1ac3a5dc152b378711922fce3d26" kindref="member">safe_percent</ref>,<sp/>pb_info.<ref refid="structPercbar__Info_1abe5b5845d05355307b21bc5859b3d837" kindref="member">max_hashes</ref>)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>fill_in_perc_bar(buf,<sp/>&amp;pb_info);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_safe_percent_from(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frac)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>frac<sp/>too<sp/>high<sp/>-<sp/>return<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(frac<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>100;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>frac<sp/>not<sp/>a<sp/>number<sp/>or<sp/>too<sp/>low<sp/>-<sp/>return<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>some<sp/>reason,<sp/>if<sp/>we<sp/>don&apos;t<sp/>check<sp/>for<sp/>-0.00,<sp/>then<sp/>get_safe_percent_from(-0.00)<sp/>returns<sp/>-0.00...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isnan(frac)<sp/>||<sp/>frac<sp/>&lt;<sp/>0.0<sp/>||<sp/>frac<sp/>==<sp/>-0.0)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>valid<sp/>frac<sp/>-<sp/>return<sp/>frac<sp/>*<sp/>100</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>frac<sp/>*<sp/>100;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_num_of_hashes_from(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>safe_percent,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_hashes)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>round(safe_percent)<sp/>/<sp/>100<sp/>*<sp/>max_hashes;</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fill_in_perc_bar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref><sp/>*pb_info)</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buf<sp/>==<sp/>NULL<sp/>||<sp/>pb_info<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>make_bar(buf,<sp/>pb_info);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>add_percent_string(buf,<sp/>pb_info);</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>make_bar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref><sp/>*pb_info)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>buf[0]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>add_n_symbols_to_buf(1,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>add_n_symbols_to_buf(pb_info-&gt;<ref refid="structPercbar__Info_1a9d89dad65290af9f6df9faf000311a26" kindref="member">num_of_hashes</ref>,<sp/></highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>add_n_symbols_to_buf(pb_info-&gt;<ref refid="structPercbar__Info_1abe5b5845d05355307b21bc5859b3d837" kindref="member">max_hashes</ref><sp/>-<sp/>pb_info-&gt;<ref refid="structPercbar__Info_1a9d89dad65290af9f6df9faf000311a26" kindref="member">num_of_hashes</ref>,<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">,<sp/>buf);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>add_n_symbols_to_buf(1,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">,<sp/>buf);<sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_percent_string(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/><ref refid="structPercbar__Info" kindref="compound">Percbar_Info</ref><sp/>*pb_info)</highlight></codeline>
<codeline lineno="117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>percent_string[256];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(percent_string,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>%.1f%%&quot;</highlight><highlight class="normal">,<sp/>pb_info-&gt;<ref refid="structPercbar__Info_1ae2af1ac3a5dc152b378711922fce3d26" kindref="member">safe_percent</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>add_n_symbols_to_buf(1,<sp/>percent_string,<sp/>buf);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="perc_bar_drawer.c"/>
  </compounddef>
</doxygen>
