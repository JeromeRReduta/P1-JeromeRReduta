<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="util_8h" kind="file" language="C++">
    <compoundname>util.h</compoundname>
    <includes local="no">sys/types.h</includes>
    <includedby refid="cpu__usage_8c" local="yes">cpu_usage.c</includedby>
    <includedby refid="display_8c" local="yes">display.c</includedby>
    <includedby refid="hostname__reader_8c" local="yes">hostname_reader.c</includedby>
    <includedby refid="mem__usage_8c" local="yes">mem_usage.c</includedby>
    <includedby refid="os__searcher_8c" local="yes">os_searcher.c</includedby>
    <includedby refid="os__static__data_8c" local="yes">os_static_data.c</includedby>
    <includedby refid="perc__bar__drawer_8c" local="yes">perc_bar_drawer.c</includedby>
    <includedby refid="procfs_8c" local="yes">procfs.c</includedby>
    <includedby refid="string__extractor_8c" local="yes">string_extractor.c</includedby>
    <includedby refid="task__adder_8c" local="yes">task_adder.c</includedby>
    <includedby refid="task__finder_8c" local="yes">task_finder.c</includedby>
    <includedby refid="util_8c" local="yes">util.c</includedby>
    <incdepgraph>
      <node id="2">
        <label>sys/types.h</label>
      </node>
      <node id="1">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>hostname_reader.c</label>
        <link refid="hostname__reader_8c"/>
      </node>
      <node id="1">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="util_8h_1a75fa1b7f896c1bc05d855ce9d9ceeffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void draw_percbar</definition>
        <argsstring>(char *buf, double frac)</argsstring>
        <name>draw_percbar</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>double</type>
          <declname>frac</declname>
        </param>
        <briefdescription>
<para>Draws the whole percent bar. </para>
        </briefdescription>
        <detaileddescription>
<para>@File file whose sole responsibility is to fill a buffer with percent bar info</para>
<para><linebreak/>
 Percent bar has the following format: <linebreak/>
 <preformatted>
[(20 # or -)] #.#%
</preformatted></para>
<para><linebreak/>
 E.g.: <preformatted>
[####----------------] 20.0%
</preformatted></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to put percent bar in </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">frac</parametername>
</parameternamelist>
<parameterdescription>
<para>fraction input </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="7" column="13" bodyfile="perc_bar_drawer.c" bodystart="31" bodyend="40" declfile="util.h" declline="7" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1afee9b02c23ffef18028a69d67af8c8ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_line_and_token</definition>
        <argsstring>(char **line_ptr, char **token_ptr)</argsstring>
        <name>destroy_line_and_token</name>
        <param>
          <type>char **</type>
          <declname>line_ptr</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>token_ptr</declname>
        </param>
        <briefdescription>
<para>Destroys one line and one token, including freeing allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a line </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>token_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a token </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="8" column="6" bodyfile="util.c" bodystart="31" bodyend="35" declfile="util.h" declline="8" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1aa9ecc65e735e295dc53f92cfefca6d9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void uid_to_uname</definition>
        <argsstring>(char *name_buf, uid_t uid)</argsstring>
        <name>uid_to_uname</name>
        <param>
          <type>char *</type>
          <declname>name_buf</declname>
        </param>
        <param>
          <type>uid_t</type>
          <declname>uid</declname>
        </param>
        <briefdescription>
<para>Gets a username from a uid and writes it to name_buf. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to write to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">uid</parametername>
</parameternamelist>
<parameterdescription>
<para>uid </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="9" column="6" bodyfile="util.c" bodystart="57" bodyend="66" declfile="util.h" declline="9" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a92b7d4a7e8001a32a756eba3ca4b4849" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int open_path</definition>
        <argsstring>(const char *base, const char *extension)</argsstring>
        <name>open_path</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
<para>Opens a path to base/extension. Lovingly ripped out of lab code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A READ-ONLY file descriptor to this path. -1 on error.</para>
</simplesect>
<simplesect kind="note"><para>This function opens a file descriptor. Must close() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="10" column="5" bodyfile="util.c" bodystart="78" bodyend="99" declfile="util.h" declline="10" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a85946f927132d967d9f348e19b252c3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t lineread</definition>
        <argsstring>(int fd, char *buf, size_t sz)</argsstring>
        <name>lineread</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sz</declname>
        </param>
        <briefdescription>
<para>Reads one line (or up to sz bytes, whichever comes first) from a file. Also lovingly ripped out of lab code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to store read line into </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sz</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of bytes to read</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes read. If it&apos;s 0 or &lt; sz, we&apos;ve either encountered an error or reached the end of the line. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="11" column="9" bodyfile="util.c" bodystart="109" bodyend="130" declfile="util.h" declline="11" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a36cc4e6b1ce708ed7492ae0979b10bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* next_token</definition>
        <argsstring>(char **str_ptr, const char *delim)</argsstring>
        <name>next_token</name>
        <param>
          <type>char **</type>
          <declname>str_ptr</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>delim</declname>
        </param>
        <briefdescription>
<para>Ripped so hard from lab code the formatting changed. The following description is word-for-word from Prof. Malensek: </para>
        </briefdescription>
        <detaileddescription>
<para>Lovingly and absolutely ripped from lab code <verbatim>        Demonstrates string tokenization in C using the strspn(3) and strcspn(3)
        functions. Unlike strtok(3), this implementation is thread safe. The code
        is based on the following newsgroup post:

        https://groups.google.com/forum/message/raw?msg=comp.lang.c/ff0xFqRPH_Y/Cen0mgciXn8J
</verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>maintains context in the string, i.e., where the next token in the string will be. If the function returns token N, then str_ptr will be updated to point to token N+1. To initialize, declare a char * that points to the string being tokenized. The pointer will be updated after each successive call to next_token. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">delim</parametername>
</parameternamelist>
<parameterdescription>
<para>the set of characters to use as delimiters (Note from Jerome: This means that each one will count as a delimiter, not that the delimiter is all of them stuck together)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char pointer to the next token in the string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="12" column="6" bodyfile="util.c" bodystart="159" bodyend="195" declfile="util.h" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a2c9e7e27bea7088608153ae7a41b2f99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_string</definition>
        <argsstring>(char **string_ptr)</argsstring>
        <name>free_string</name>
        <param>
          <type>char **</type>
          <declname>string_ptr</declname>
        </param>
        <briefdescription>
<para>Frees a string pointer and sets it to null. If the pointers are already null, does nothing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="13" column="6" bodyfile="util.c" bodystart="222" bodyend="228" declfile="util.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a1eec03fb0504179817fac5ae041819bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int n_copy_if_present</definition>
        <argsstring>(char *dest, char *src, int n)</argsstring>
        <name>n_copy_if_present</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Copies up to n chars from src into dest. If n == 0 or there is an error, there is no copy, and the function returns -1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>destination string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of chars to copy</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. 1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="14" column="5" bodyfile="util.c" bodystart="239" bodyend="249" declfile="util.h" declline="14" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ac1ae6b1ec66379876912533aed5edada" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int n_copy_if_present_with_default</definition>
        <argsstring>(char *dest, char *src, int n, char *default_value)</argsstring>
        <name>n_copy_if_present_with_default</name>
        <param>
          <type>char *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>default_value</declname>
        </param>
        <briefdescription>
<para>Same as n_copy_if_present, but returns a default value if the function encounters any error. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dest</parametername>
</parameternamelist>
<parameterdescription>
<para>destination string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>max number of chars to copy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_value</parametername>
</parameternamelist>
<parameterdescription>
<para>default value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0, as it always succeeds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="15" column="5" bodyfile="util.c" bodystart="261" bodyend="268" declfile="util.h" declline="15" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a481093cb9e9347926d54badf49ed6491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_n_symbols_to_buf</definition>
        <argsstring>(int n, char *symbol, char *buf)</argsstring>
        <name>add_n_symbols_to_buf</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>symbol</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Adds a symbol to a buf, n times. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of times to add symbol to a buf </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>symbol</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol to add </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to add to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="17" column="6" bodyfile="util.c" bodystart="44" bodyend="49" declfile="util.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1ad86dadbd8f7f8c774d23fd0f73b20651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void trim_leading_whitespace</definition>
        <argsstring>(char **current_ptr)</argsstring>
        <name>trim_leading_whitespace</name>
        <param>
          <type>char **</type>
          <declname>current_ptr</declname>
        </param>
        <briefdescription>
<para>Moves a pointer to a string forward past any whitespace chars, effectively trimming leading whitespace from the string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="19" column="6" bodyfile="util.c" bodystart="276" bodyend="281" declfile="util.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="util_8h_1a332ed6c4dbfea36d5530c84cbf0f652e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_n_copy_if_present</definition>
        <argsstring>()</argsstring>
        <name>test_n_copy_if_present</name>
        <briefdescription>
<para>Tests n_copy_if_present() and n_copy_if_present_with_default(). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Confirmed success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="util.h" line="22" column="6" bodyfile="util.c" bodystart="288" bodyend="343" declfile="util.h" declline="22" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_UTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_UTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>draw_percbar(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frac);<sp/></highlight><highlight class="comment">//<sp/>Added<sp/>this<sp/>so<sp/>test<sp/>wouldn&apos;t<sp/>have<sp/>warning<sp/>:D</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_line_and_token(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**line_ptr,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**token_ptr);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>uid_to_uname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_buf,<sp/>uid_t<sp/>uid);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>open_path(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension);</highlight></codeline>
<codeline lineno="11"><highlight class="normal">ssize_t<sp/>lineread(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sz);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next_token(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**str_ptr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delim);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>free_string(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**string_ptr);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_copy_if_present(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_copy_if_present_with_default(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*default_value);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_n_symbols_to_buf(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*symbol,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>trim_leading_whitespace(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**current_ptr);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_n_copy_if_present();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="util.h"/>
  </compounddef>
</doxygen>
