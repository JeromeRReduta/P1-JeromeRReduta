<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="mem__usage_8c" kind="file" language="C++">
    <compoundname>mem_usage.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes refid="os__searcher_8h" local="yes">os_searcher.h</includes>
    <includes local="yes">string.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="string__extractor_8h" local="yes">string_extractor.h</includes>
    <includes refid="procfs_8h" local="yes">procfs.h</includes>
    <includes refid="mem__usage_8h" local="yes">mem_usage.h</includes>
    <incdepgraph>
      <node id="13">
        <label>procfs.h</label>
        <link refid="procfs_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>task_adder.h</label>
        <link refid="task__adder_8h_source"/>
      </node>
      <node id="6">
        <label>os_searcher.h</label>
        <link refid="os__searcher_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="3">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string_extractor.h</label>
        <link refid="string__extractor_8h"/>
      </node>
      <node id="7">
        <label>task_finder.h</label>
        <link refid="task__finder_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>mem_usage.c</label>
        <link refid="mem__usage_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>mem_usage.h</label>
        <link refid="mem__usage_8h_source"/>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structMem__File__Info" prot="public">Mem_File_Info</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="mem__usage_8c_1a6cd0af168e7bf7485a0103c91084cae8" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int mem_kb_to_mb</definition>
        <argsstring></argsstring>
        <name>mem_kb_to_mb</name>
        <initializer>= 1048576</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conversion rate of kb to mb - this many kb = 1 mb </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="19" column="11" bodyfile="mem_usage.c" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mem__usage_8c_1a058863191ac7cba31bf85645c2bf0de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_init</definition>
        <argsstring>(struct mem_stats *mstats, char *proc_dir)</argsstring>
        <name>mem_init</name>
        <param>
          <type>struct <ref refid="structmem__stats" kindref="compound">mem_stats</ref> *</type>
          <declname>mstats</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Initalizes <ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct with info from proc_dir/meminfo. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mstats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmem__stats" kindref="compound">mem_stats</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="52" column="6" bodyfile="mem_usage.c" bodystart="52" bodyend="60" declfile="mem_usage.c" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mem__usage_8c_1acfde9e5217143a6435569e5f06bb5bb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int mem_read_file_and_store_into</definition>
        <argsstring>(char *proc_dir, Mem_File_Info *read_file_info)</argsstring>
        <name>mem_read_file_and_store_into</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref> *</type>
          <declname>read_file_info</declname>
        </param>
        <briefdescription>
<para>Reads proc/meminfo and stores data into read_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Mem_File_info struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="70" column="5" bodyfile="mem_usage.c" bodystart="70" bodyend="81" declfile="mem_usage.c" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="mem__usage_8c_1aa283bb983588635521c2ce00c1fb9ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_populate_mem_stats_with</definition>
        <argsstring>(struct mem_stats *mstats, Mem_File_Info *read_file_info)</argsstring>
        <name>mem_populate_mem_stats_with</name>
        <param>
          <type>struct <ref refid="structmem__stats" kindref="compound">mem_stats</ref> *</type>
          <declname>mstats</declname>
        </param>
        <param>
          <type><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref> *</type>
          <declname>read_file_info</declname>
        </param>
        <briefdescription>
<para>Populates <ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct with info from read_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mstats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="89" column="6" bodyfile="mem_usage.c" bodystart="89" bodyend="96" declfile="mem_usage.c" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mem__usage_8c_1a9846f9a90af01018811ae1a8d2b0b81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroy_mem_file_info</definition>
        <argsstring>(Mem_File_Info *read_file_info)</argsstring>
        <name>destroy_mem_file_info</name>
        <param>
          <type><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref> *</type>
          <declname>read_file_info</declname>
        </param>
        <briefdescription>
<para>Frees all allocated memory in read_file_info and sets ptrs to NULL. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>read_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="103" column="6" bodyfile="mem_usage.c" bodystart="103" bodyend="110" declfile="mem_usage.c" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="mem__usage_8c_1af208b8748193352865b1c6de912b3a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mem_log_stats</definition>
        <argsstring>(struct mem_stats *mstats)</argsstring>
        <name>mem_log_stats</name>
        <param>
          <type>struct <ref refid="structmem__stats" kindref="compound">mem_stats</ref> *</type>
          <declname>mstats</declname>
        </param>
        <briefdescription>
<para>Convience function, for debugging. Logs all info in <ref refid="structmem__stats" kindref="compound">mem_stats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mstats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structmem__stats" kindref="compound">mem_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="mem_usage.c" line="117" column="6" bodyfile="mem_usage.c" bodystart="117" bodyend="123" declfile="mem_usage.c" declline="44" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os_searcher.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__extractor_8h" kindref="compound">string_extractor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="procfs_8h" kindref="compound">procfs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;mem_usage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mem_kb_to_mb<sp/>=<sp/>1048576;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structMem__File__Info" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mem_available_buf[256];</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>mem_total_buf[256];</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mem_available_token;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mem_total_token;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Func<sp/>prototypes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mem_read_file_and_store_into(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_populate_mem_stats_with(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats,<sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_mem_file_info(<ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_log_stats(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_init(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>read_file_info<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_read_file_and_store_into(proc_dir,<sp/>&amp;read_file_info)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mem_populate_mem_stats_with(mstats,<sp/>&amp;read_file_info);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>destroy_mem_file_info(&amp;read_file_info);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mem_read_file_and_store_into(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info)</highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>search_for_mem_info<sp/>didn&apos;t<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_for_mem_info(proc_dir,<sp/>read_file_info-&gt;<ref refid="structMem__File__Info_1ab7246f94e16ae958207fec850573ab96" kindref="member">mem_available_buf</ref>,<sp/>read_file_info-&gt;<ref refid="structMem__File__Info_1a671587f3eccfa1a7f6a687916b7dbc8e" kindref="member">mem_total_buf</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>search_for_mem_info<sp/>did<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>read_file_info-&gt;<ref refid="structMem__File__Info_1ac8b116704042e10b9803506b9a7aa074" kindref="member">mem_available_token</ref><sp/>=<sp/>extract_token_after(read_file_info-&gt;<ref refid="structMem__File__Info_1ab7246f94e16ae958207fec850573ab96" kindref="member">mem_available_buf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>read_file_info-&gt;<ref refid="structMem__File__Info_1a8c5bb38309be349ebbcc84c6b6feb556" kindref="member">mem_total_token</ref><sp/>=<sp/>extract_token_after(read_file_info-&gt;<ref refid="structMem__File__Info_1a671587f3eccfa1a7f6a687916b7dbc8e" kindref="member">mem_total_buf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_populate_mem_stats_with(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats,<sp/><ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info)</highlight></codeline>
<codeline lineno="90"><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>total<sp/>=<sp/>atof(read_file_info-&gt;<ref refid="structMem__File__Info_1a8c5bb38309be349ebbcc84c6b6feb556" kindref="member">mem_total_token</ref>)<sp/>/<sp/>mem_kb_to_mb;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avail<sp/>=<sp/>atof(read_file_info-&gt;<ref refid="structMem__File__Info_1ac8b116704042e10b9803506b9a7aa074" kindref="member">mem_available_token</ref>)<sp/>/<sp/>mem_kb_to_mb;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats-&gt;total<sp/>=<sp/>total;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>mstats-&gt;used<sp/>=<sp/>total<sp/>-<sp/>avail;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destroy_mem_file_info(<ref refid="structMem__File__Info" kindref="compound">Mem_File_Info</ref><sp/>*read_file_info)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(read_file_info-&gt;<ref refid="structMem__File__Info_1ab7246f94e16ae958207fec850573ab96" kindref="member">mem_available_buf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(read_file_info-&gt;<ref refid="structMem__File__Info_1a671587f3eccfa1a7f6a687916b7dbc8e" kindref="member">mem_total_buf</ref>,<sp/></highlight><highlight class="stringliteral">&quot;\0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(read_file_info-&gt;<ref refid="structMem__File__Info_1ac8b116704042e10b9803506b9a7aa074" kindref="member">mem_available_token</ref>)<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(read_file_info-&gt;<ref refid="structMem__File__Info_1a8c5bb38309be349ebbcc84c6b6feb556" kindref="member">mem_total_token</ref>)<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mem_log_stats(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structmem__stats" kindref="compound">mem_stats</ref><sp/>*mstats)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;STATS:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;used:<sp/>%f\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;total:<sp/>%f\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mstats-&gt;used,<sp/>mstats-&gt;total);</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="mem_usage.c"/>
  </compounddef>
</doxygen>
