<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="os__searcher_8h" kind="file" language="C++">
    <compoundname>os_searcher.h</compoundname>
    <includes refid="task__finder_8h" local="yes">task_finder.h</includes>
    <includedby refid="cpu__usage_8c" local="yes">cpu_usage.c</includedby>
    <includedby refid="mem__usage_8c" local="yes">mem_usage.c</includedby>
    <includedby refid="os__searcher_8c" local="yes">os_searcher.c</includedby>
    <includedby refid="os__static__data_8c" local="yes">os_static_data.c</includedby>
    <includedby refid="procfs_8c" local="yes">procfs.c</includedby>
    <includedby refid="task__adder_8c" local="yes">task_adder.c</includedby>
    <includedby refid="task__finder_8c" local="yes">task_finder.c</includedby>
    <includedby refid="util_8c" local="yes">util.c</includedby>
    <incdepgraph>
      <node id="3">
        <label>task_adder.h</label>
        <link refid="task__adder_8h_source"/>
      </node>
      <node id="1">
        <label>os_searcher.h</label>
        <link refid="os__searcher_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>task_finder.h</label>
        <link refid="task__finder_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="os__searcher_8h_1a20d1fde9d00ad59859b3b50f0bb56b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_hostname</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_hostname</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for hostname. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the hostname of the OS, or NULL on error</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="6" column="6" bodyfile="os_searcher.c" bodystart="37" bodyend="40" declfile="os_searcher.h" declline="6" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1ada87cd6a0df97ed040318f1831b089bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_kernel</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_kernel</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its kernel name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the kernel name of the OS, or NULL on error.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="7" column="6" bodyfile="os_searcher.c" bodystart="51" bodyend="54" declfile="os_searcher.h" declline="7" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a2af8b12249b253dadb4e3759ac8b3852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_model</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_model</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its cpu model name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the cpu model name of the OS, or NULL on error.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="8" column="6" bodyfile="os_searcher.c" bodystart="65" bodyend="68" declfile="os_searcher.h" declline="8" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a8c047462ae3a544af44b78d17a41002a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_cores</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_cores</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for how many cpu cores it has. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/cpuinfo about how many cpu cores this OS has</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="9" column="6" bodyfile="os_searcher.c" bodystart="79" bodyend="82" declfile="os_searcher.h" declline="9" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a9e117bfa65d4af8cf09078bc74ed92f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_uptime</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_uptime</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for how long it&apos;s been running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/uptime representing how long this OS has been running, or NULl on error</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="10" column="6" bodyfile="os_searcher.c" bodystart="93" bodyend="96" declfile="os_searcher.h" declline="10" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1afe7485ae167d93d7d035ea07f302ceaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_load_avg</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_load_avg</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its load average values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/loadavg representing its load average values.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="11" column="6" bodyfile="os_searcher.c" bodystart="107" bodyend="110" declfile="os_searcher.h" declline="11" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a3e83f8454ff080867dcb78b8830b9540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_uname</definition>
        <argsstring>(char *uid_str)</argsstring>
        <name>search_for_uname</name>
        <param>
          <type>char *</type>
          <declname>uid_str</declname>
        </param>
        <briefdescription>
<para>Given a UID as a string, searches for the associated username in /etc/passwd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid_str</parametername>
</parameternamelist>
<parameterdescription>
<para>UID, as a string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the username associated with uid_str, or NULL on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="12" column="6" bodyfile="os_searcher.c" bodystart="119" bodyend="128" declfile="os_searcher.h" declline="12" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1aa3a3b5f15dd4e1899f8e638b9623c239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_usage</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_usage</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its cpu usage numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/stat representing its cpu usage numbers.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="13" column="6" bodyfile="os_searcher.c" bodystart="139" bodyend="142" declfile="os_searcher.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1af453d433b364337d1885239c600c9b63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_mem_available</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_mem_available</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="14" column="6" declfile="os_searcher.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a75aefd86f962bc1e3bdd08d3a820ed43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_mem_total</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_mem_total</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="15" column="6" declfile="os_searcher.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1af7ddb18d974ffd3304151a1ebe8cf439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int search_for_mem_info</definition>
        <argsstring>(char *proc_dir, char *mem_avail_buf, char *mem_total_buf)</argsstring>
        <name>search_for_mem_info</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>mem_avail_buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>mem_total_buf</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its memory usage numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem_avail_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to copy the line holding &quot;MemAvailable&quot; data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem_total_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to copy the line holding &quot;MemTotal&quot; data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on FAILURE, 1 on SUCCESS</para>
</simplesect>
<simplesect kind="note"><para>Decided to use two buffers instead of allocating memory, and decided to read both values at once, due to bug w/ search_file_for_memory_usage() and maybe lineread(). If I try to read the same file twice, it seems that the functions don&apos;t read from the top, and will go into the next mem_info file if necessary. This causes values from Test N + 1 to show up in Test N. Using two buffers solves this problem. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="16" column="5" bodyfile="os_searcher.c" bodystart="158" bodyend="163" declfile="os_searcher.h" declline="16" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1ac2d91bb090d1533fe2499469095e012b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void search_for_task_info</definition>
        <argsstring>(char *proc_dir, char *entry_name, Task_Status_File_Info *status_file_info)</argsstring>
        <name>search_for_task_info</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry_name</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Searches proc for a given task entry_name, and stores info from proc/entry_name/status into status_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_name</parametername>
</parameternamelist>
<parameterdescription>
<para>entry name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="17" column="6" bodyfile="os_searcher.c" bodystart="172" bodyend="180" declfile="os_searcher.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1a70f73d023e858d672f4f9917ef846e97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_file_first_line</definition>
        <argsstring>(const char *proc_dir, const char *extension)</argsstring>
        <name>search_file_first_line</name>
        <param>
          <type>const char *</type>
          <declname>proc_dir</declname>
          <defname>base</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
<para>Searches for the file proc_dir/extension and returns the first line as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This file has no vars Func prototypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;br&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the file proc_dir/extensions exists and is not empty, return first line. Else, return NULL</para>
</simplesect>
Searches for the file in base/extension and returns the first line</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the file base/extension exists and is not empty, return first line. Else, return NULL.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="19" column="6" bodyfile="os_searcher.c" bodystart="202" bodyend="218" declfile="os_searcher.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8h_1ae9b05ae06576d61dfef764d8f3b07d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_file_with_key</definition>
        <argsstring>(const char *proc_dir, const char *extension, const char *key)</argsstring>
        <name>search_file_with_key</name>
        <param>
          <type>const char *</type>
          <declname>proc_dir</declname>
          <defname>base</defname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Searches the file base/extension, and returns the first line containing key, up to buf_sz bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>search key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If base/extension exists and contains a line with key, returns that line. Otherwise, returns NULL</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.h" line="20" column="6" bodyfile="os_searcher.c" bodystart="232" bodyend="261" declfile="os_searcher.h" declline="20" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_OS_SEARCHER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_OS_SEARCHER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;task_finder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_hostname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_kernel(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_model(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_cores(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_uptime(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_load_avg(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_uname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_usage(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_mem_available(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_mem_total(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>search_for_mem_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_avail_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_total_buf);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_for_task_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entry_name,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_first_line(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_with_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="os_searcher.h"/>
  </compounddef>
</doxygen>
