<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Yo,<sp/>I<sp/>thought<sp/>this<sp/>was<sp/>due<sp/>like<sp/>a<sp/>month<sp/>ago</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>finishing<sp/>(sort<sp/>of)<sp/>Project<sp/>2,<sp/>I<sp/>learned<sp/>a<sp/>ton<sp/>of<sp/>things.<sp/>In<sp/>particular,<sp/>I<sp/>learned<sp/>a<sp/>couple<sp/>of<sp/>coding<sp/>principles<sp/>that<sp/>might<sp/>make<sp/>codeing<sp/>a<sp/>lot<sp/>smoother<sp/>and<sp/>maybe<sp/>even<sp/>faster.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">So<sp/>I&apos;ve<sp/>decided<sp/>to<sp/>rewrite<sp/>this<sp/>whole<sp/>project<sp/>more<sp/>or<sp/>less<sp/>from<sp/>scratch,<sp/>using<sp/>the<sp/>following<sp/>principles:</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1.<sp/>Every<sp/>file&apos;s<sp/>functions<sp/>and<sp/>constant<sp/>variables<sp/>have<sp/>a<sp/>prefix.<sp/>For<sp/>example,<sp/>functions<sp/>in<sp/>&quot;linked_list.c&quot;<sp/>would<sp/>have<sp/>the<sp/>format<sp/>&quot;ll_func_name(...)&quot;&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Test<sp/>funcs,<sp/>however,<sp/>have<sp/>a<sp/>different<sp/>format:<sp/>&quot;test_prefix_func_name()&quot;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>2.<sp/>Single<sp/>Responsibility<sp/>Principle:<sp/>If<sp/>I&apos;m<sp/>storing<sp/>a<sp/>group<sp/>of<sp/>closely-related<sp/>data<sp/>and<sp/>manipulating<sp/>it<sp/>w/<sp/>functions,<sp/>it<sp/>belongs<sp/>in<sp/>its<sp/>own<sp/>&quot;class&quot;<sp/>(c<sp/>file).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>3.<sp/>Outlining:<sp/>I<sp/>work<sp/>best<sp/>when<sp/>I<sp/>have<sp/>a<sp/>clear<sp/>outline<sp/>and<sp/>a<sp/>good<sp/>grasp<sp/>on<sp/>what<sp/>everything<sp/>does.<sp/>Therefore,<sp/>before<sp/>I<sp/>actually<sp/>code<sp/>any<sp/>c<sp/>files,<sp/>I&apos;m<sp/>going<sp/>to<sp/>write<sp/>an<sp/>outline<sp/>in<sp/>VERY<sp/>basic<sp/>UML.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Here&apos;s<sp/>an<sp/>exmaple<sp/>w/<sp/>sample.c:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(Note<sp/>that<sp/>C<sp/>stands<sp/>for<sp/>const)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vars:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>a:<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>b:<sp/>type</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>c:<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>d:<sp/>type</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>e:<sp/>const<sp/>type<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>f:<sp/>const<sp/>type</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C<sp/>g:<sp/>const<sp/>type</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Funcs:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_data():<sp/>void</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy_data():<sp/>void</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>4.<sp/>Global<sp/>and<sp/>static<sp/>vars:<sp/>All<sp/>files<sp/>that<sp/>keep<sp/>track<sp/>of<sp/>global<sp/>and<sp/>static<sp/>vars<sp/>should<sp/>organize<sp/>it<sp/>within<sp/>a<sp/>struct.<sp/>Here&apos;s<sp/>an<sp/>example<sp/>w/<sp/>sample.c<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample.h:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>a;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>Sample_Public_Data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extern<sp/>Sample_Public_Data*<sp/>sample_globals;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sample.c</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typedef<sp/>struct<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>c;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>Sample_Private_Data;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Constants<sp/>go<sp/>here</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>type<sp/>e<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>type<sp/>f<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>type<sp/>g<sp/>=<sp/>...;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Sample_Public_Data*<sp/>sample_globals;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>Sample_Private_Data*<sp/>sample_locals;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>later...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>init_data()<sp/>//<sp/>Initializes<sp/>public<sp/>and<sp/>private<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>destroy_data()<sp/>//<sp/>Resets<sp/>and<sp/>frees<sp/>public<sp/>and<sp/>private<sp/>data</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>5.<sp/>Test<sp/>EVERYTHING</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Every<sp/>func<sp/>in<sp/>UML<sp/>should<sp/>have<sp/>a<sp/>test<sp/>written<sp/>for<sp/>it</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Also,<sp/>figure<sp/>out<sp/>how<sp/>each<sp/>given<sp/>test<sp/>works</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WRITE<sp/>THE<sp/>TEST<sp/>FIRST,<sp/>then<sp/>write<sp/>code<sp/>around<sp/>it</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Goals<sp/>for<sp/>this<sp/>project</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&lt;pre&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>1.<sp/>Refactor<sp/>the<sp/>code<sp/>using<sp/>these<sp/>new<sp/>principles</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>2.<sp/>End<sp/>up<sp/>with<sp/>clean(er)<sp/>code<sp/>and<sp/>basic<sp/>UML<sp/>docs<sp/>for<sp/>every<sp/>class</highlight></codeline>
<codeline><highlight class="normal">&lt;/pre&gt;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
