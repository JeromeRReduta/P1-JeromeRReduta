<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="task__adder_8c" kind="file" language="C++">
    <compoundname>task_adder.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes refid="os__searcher_8h" local="yes">os_searcher.h</includes>
    <includes local="yes">string.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="string__extractor_8h" local="yes">string_extractor.h</includes>
    <includes local="no">dirent.h</includes>
    <includes local="no">ctype.h</includes>
    <includes refid="procfs_8h" local="yes">procfs.h</includes>
    <includes refid="task__finder_8h" local="yes">task_finder.h</includes>
    <includes refid="task__adder_8h" local="yes">task_adder.h</includes>
    <incdepgraph>
      <node id="15">
        <label>procfs.h</label>
        <link refid="procfs_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>task_adder.c</label>
        <link refid="task__adder_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="8">
        <label>task_adder.h</label>
        <link refid="task__adder_8h_source"/>
      </node>
      <node id="6">
        <label>os_searcher.h</label>
        <link refid="os__searcher_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>unistd.h</label>
      </node>
      <node id="3">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string_extractor.h</label>
        <link refid="string__extractor_8h"/>
      </node>
      <node id="7">
        <label>task_finder.h</label>
        <link refid="task__finder_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ctype.h</label>
      </node>
      <node id="4">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>dirent.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="task__adder_8c_1a86dcd9bbfb135b802f0c3245ccb0b316" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_init_info</definition>
        <argsstring>(struct task_info *current_task, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_init_info</name>
        <param>
          <type>struct <ref refid="structtask__info" kindref="compound">task_info</ref> *</type>
          <declname>current_task</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Initalizes <ref refid="structtask__info" kindref="compound">task_info</ref> struct with info from status_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para>Func prototypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__info" kindref="compound">task_info</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="164" column="6" bodyfile="task_adder.c" bodystart="164" bodyend="170" declfile="task_adder.c" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1abf3cf65b4fcbbaf2a4576f85be1be568" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_read_status_and_store_into</definition>
        <argsstring>(char *proc_dir, char *entry_name, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_read_status_and_store_into</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry_name</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Reads info from proc_dir/entry_name/status and populates status_file_info with the info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_name</parametername>
</parameternamelist>
<parameterdescription>
<para>entry name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if both tasks succeed, otherwise -1 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="43" column="5" bodyfile="task_adder.c" bodystart="43" bodyend="47" declfile="task_adder.c" declline="23" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1a56604d6becbb31f7659edce3708a85be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int task_init_status_file_info_tokens</definition>
        <argsstring>(Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_init_status_file_info_tokens</name>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Populates the status_file_info tokens with status_file_info bufs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; -1 if one of the bufs is empty, which would mean we couldn&apos;t find all the required task info </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="56" column="5" bodyfile="task_adder.c" bodystart="56" bodyend="69" declfile="task_adder.c" declline="24" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1ae2d0cbb472f570e092d6aabe572e09bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_populate_task_stats_with</definition>
        <argsstring>(struct task_stats *stats, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_populate_task_stats_with</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Given info about one task from status_file info, adds that one task to stats. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="77" column="6" bodyfile="task_adder.c" bodystart="77" bodyend="91" declfile="task_adder.c" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1a11395f4ae231b4f790d4c16c5b701fe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int grow_active_tasks</definition>
        <argsstring>(struct task_stats *stats)</argsstring>
        <name>grow_active_tasks</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
<para>Double the size of active_tasks array. This function should only be called when the active_tasks array is full. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>task_stats_struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success; -1 on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="100" column="5" bodyfile="task_adder.c" bodystart="100" bodyend="114" declfile="task_adder.c" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1a349251ec9372d736e445fd65b3786637" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_add_to_stats_count</definition>
        <argsstring>(struct task_stats *stats, char state)</argsstring>
        <name>task_add_to_stats_count</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>char</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Increases the appropriate <ref refid="structtask__stats" kindref="compound">task_stats</ref> counter for whatever state this task has. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">state</parametername>
</parameternamelist>
<parameterdescription>
<para>char representing the task&apos;s state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="122" column="6" bodyfile="task_adder.c" bodystart="122" bodyend="143" declfile="task_adder.c" declline="27" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1ad364998d07769c95cc88e6397e9e1eaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_add_active_task_to</definition>
        <argsstring>(struct task_stats *stats, Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_add_active_task_to</name>
        <param>
          <type>struct <ref refid="structtask__stats" kindref="compound">task_stats</ref> *</type>
          <declname>stats</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Adds an active task to <ref refid="structtask__stats" kindref="compound">task_stats</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Task_Status_File_info struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="151" column="6" bodyfile="task_adder.c" bodystart="151" bodyend="156" declfile="task_adder.c" declline="28" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1a2379a90241e2fd4103ccde7f525652a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_process_and_copy_state</definition>
        <argsstring>(struct task_info *current_task, char *state_token)</argsstring>
        <name>task_process_and_copy_state</name>
        <param>
          <type>struct <ref refid="structtask__info" kindref="compound">task_info</ref> *</type>
          <declname>current_task</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>state_token</declname>
        </param>
        <briefdescription>
<para>Removes the parantheses from. </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted>(state)</preformatted> and copies processed string to buffer</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_task</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structtask__stats" kindref="compound">task_stats</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state_token</parametername>
</parameternamelist>
<parameterdescription>
<para>string representing state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="178" column="6" bodyfile="task_adder.c" bodystart="178" bodyend="186" declfile="task_adder.c" declline="29" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1a465a7dad132a402a590dc223fd16b1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_destroy_status_file_info</definition>
        <argsstring>(Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_destroy_status_file_info</name>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Destroys <ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct, including freeing allocated memory. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="193" column="6" bodyfile="task_adder.c" bodystart="193" bodyend="199" declfile="task_adder.c" declline="31" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="task__adder_8c_1ae8b006cd447a3a0ffb6f99020565fed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void task_log_status_file_info</definition>
        <argsstring>(Task_Status_File_Info *status_file_info)</argsstring>
        <name>task_log_status_file_info</name>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Convenience function, for debugging. Logs all the information in a <ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="task_adder.c" line="206" column="6" bodyfile="task_adder.c" bodystart="206" bodyend="220" declfile="task_adder.c" declline="32" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os_searcher.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__extractor_8h" kindref="compound">string_extractor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;dirent.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="procfs_8h" kindref="compound">procfs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;task_finder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;task_adder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_init_info(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>*current_task,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_read_status_and_store_into(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entry_name,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_init_status_file_info_tokens(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_populate_task_stats_with(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grow_active_tasks(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_add_to_stats_count(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_add_active_task_to(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_process_and_copy_state(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__info" kindref="compound">task_info</ref>*<sp/>current_task,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state_token);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_destroy_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_log_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_read_status_and_store_into(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entry_name,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>search_for_task_info(proc_dir,<sp/>entry_name,<sp/>status_file_info);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>task_init_status_file_info_tokens(status_file_info);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>task_init_status_file_info_tokens(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>1<sp/>of<sp/>bufs<sp/>is<sp/>empty,<sp/>which<sp/>would<sp/>mean<sp/>we<sp/>couldn&apos;t<sp/>find<sp/>all<sp/>the<sp/>required<sp/>task<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(status_file_info-&gt;pid_buf)<sp/>==<sp/>0<sp/>||<sp/>strlen(status_file_info-&gt;uid_buf)<sp/>==<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strlen(status_file_info-&gt;name_buf)<sp/>==<sp/>0<sp/>||<sp/>strlen(status_file_info-&gt;state_buf)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>status_file_info-&gt;pid_token<sp/>=<sp/>strdup(status_file_info-&gt;pid_buf);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>status_file_info-&gt;uid_token<sp/>=<sp/>extract_token_after(status_file_info-&gt;uid_buf,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>status_file_info-&gt;state_token<sp/>=<sp/>extract_token_after(status_file_info-&gt;state_buf,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>status_file_info-&gt;name_token<sp/>=<sp/>extract_token_after(status_file_info-&gt;name_buf,<sp/></highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_populate_task_stats_with(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>active<sp/>tasks<sp/>array<sp/>is<sp/>full<sp/>-&gt;<sp/>attempt<sp/>to<sp/>grow<sp/>array<sp/>-&gt;<sp/>attempt<sp/>fails<sp/>-<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stats-&gt;active_tasks_size<sp/>==<sp/>stats-&gt;active_tasks_max_len<sp/>&amp;&amp;<sp/>grow_active_tasks(stats)<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>status_file_info-&gt;state_token[0];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>task_add_to_stats_count(stats,<sp/>state);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>Task<sp/>is<sp/>not<sp/>sleeping<sp/>(&apos;I&apos;<sp/>counts<sp/>as<sp/>sleeping<sp/>in<sp/>this<sp/>project)<sp/>-<sp/>add<sp/>task<sp/>info<sp/>to<sp/>active<sp/>tasks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>state<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_add_active_task_to(stats,<sp/>status_file_info);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>grow_active_tasks(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>stats-&gt;active_tasks_max_len<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>*new_tasks<sp/>=<sp/>realloc(stats-&gt;active_tasks,<sp/>stats-&gt;active_tasks_max_len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__info" kindref="compound">task_info</ref>));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>new_tasks<sp/>is<sp/>NULL<sp/>-<sp/>out<sp/>of<sp/>memory<sp/>-<sp/>free<sp/>stats-&gt;active_tasks<sp/>and<sp/>return<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_tasks<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>OUT<sp/>OF<sp/>MEM\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(stats-&gt;active_tasks);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>new_tasks<sp/>not<sp/>NULL<sp/>-<sp/>realloc<sp/>worked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>stats-&gt;active_tasks<sp/>=<sp/>new_tasks;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_add_to_stats_count(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>stats-&gt;total++;<sp/></highlight><highlight class="comment">//<sp/>Always<sp/>increase<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;R&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats-&gt;running++;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats-&gt;waiting++;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;S&apos;<sp/>(sleeping)<sp/>and<sp/>&apos;I&apos;<sp/>(idle)<sp/>both<sp/>count<sp/>as<sp/>sleeping<sp/>in<sp/>this<sp/>project</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal"><sp/>||<sp/>state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;I&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats-&gt;sleeping++;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;T&apos;<sp/>(stopped)<sp/>and<sp/>&apos;t&apos;<sp/>(disk<sp/>stopped)<sp/>both<sp/>count<sp/>as<sp/>stopped<sp/>in<sp/>this<sp/>project</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;T&apos;</highlight><highlight class="normal"><sp/>||<sp/>state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;t&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats-&gt;stopped++;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats-&gt;zombie++;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_add_active_task_to(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__stats" kindref="compound">task_stats</ref><sp/>*stats,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtask__info" kindref="compound">task_info</ref>*<sp/>current_task<sp/>=<sp/>stats-&gt;active_tasks<sp/>+<sp/>stats-&gt;active_tasks_size;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>task_init_info(current_task,<sp/>status_file_info);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>stats-&gt;active_tasks_size++;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_init_info(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__info" kindref="compound">task_info</ref><sp/>*current_task,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>current_task-&gt;pid<sp/>=<sp/>atoi(status_file_info-&gt;pid_token);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>current_task-&gt;uid<sp/>=<sp/>atoi(status_file_info-&gt;uid_token);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>task_process_and_copy_state(current_task,<sp/>status_file_info-&gt;state_token);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>strncpy(current_task-&gt;name,<sp/>status_file_info-&gt;name_token,<sp/>25);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_process_and_copy_state(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structtask__info" kindref="compound">task_info</ref>*<sp/>current_task,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state_token)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>state_copy[256];</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(state_copy,<sp/>state_token<sp/>+<sp/>3);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>state_copy[strlen(state_copy)<sp/>-<sp/>1]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(current_task-&gt;state,<sp/>state_copy);</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_destroy_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(status_file_info-&gt;pid_token)<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(status_file_info-&gt;uid_token)<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(status_file_info-&gt;name_token)<sp/>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>free_string(<sp/>&amp;(status_file_info-&gt;state_token)<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>task_log_status_file_info(<ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;STATUS<sp/>FILE<sp/>INFO:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;pid_buf:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;uid_buf:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;name_buf:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;state_buf:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;pid_token:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;uid_token:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;name_token:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;state_token:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_file_info-&gt;pid_buf,<sp/>status_file_info-&gt;uid_buf,<sp/>status_file_info-&gt;name_buf,<sp/>status_file_info-&gt;state_buf,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>status_file_info-&gt;pid_token,<sp/>status_file_info-&gt;uid_token,<sp/>status_file_info-&gt;name_token,<sp/>status_file_info-&gt;state_token);</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="task_adder.c"/>
  </compounddef>
</doxygen>
