<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="uptime__formatter_8c" kind="file" language="C++">
    <compoundname>uptime_formatter.c</compoundname>
    <includes local="no">math.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes refid="uptime__formatter_8h" local="yes">uptime_formatter.h</includes>
    <incdepgraph>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="6">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math.h</label>
      </node>
      <node id="1">
        <label>uptime_formatter.c</label>
        <link refid="uptime__formatter_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>uptime_formatter.h</label>
        <link refid="uptime__formatter_8h_source"/>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="uptime__formatter_8c_1a4bbfa134ea0f15203e9c33216f49e64a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * time_f_get_time_str</definition>
        <argsstring>(double time)</argsstring>
        <name>time_f_get_time_str</name>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Converts uptime to a formatted uptime string and returns it. </para>
        </briefdescription>
        <detaileddescription>
<para>@File file whose sole responbility is to format a time number into a string readable by humans, and write it to a buffer.</para>
<para>Prefix: time_f This file has no vars Func prototypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>uptime</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A formatted uptime string, readable by humans </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="35" column="6" bodyfile="uptime_formatter.c" bodystart="35" bodyend="41" declfile="uptime_formatter.c" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1acc2fd3e47b361a77e3e72f2df2fb09bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_init_uptime_info</definition>
        <argsstring>(Uptime_Info *time_info, double time)</argsstring>
        <name>time_f_init_uptime_info</name>
        <param>
          <type><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> *</type>
          <declname>time_info</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Initalizes time_info struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_info</parametername>
</parameternamelist>
<parameterdescription>
<para>time_info struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>OS uptime </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="49" column="6" bodyfile="uptime_formatter.c" bodystart="49" bodyend="57" declfile="uptime_formatter.c" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a63c6862cda6080824162aead88fa1b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_normalize</definition>
        <argsstring>(int *smaller_unit, int *larger_unit, int base)</argsstring>
        <name>time_f_normalize</name>
        <param>
          <type>int *</type>
          <declname>smaller_unit</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>larger_unit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Normalizes a smaller unit of time by setting it to a base, and carrying the rest over to hte larger unit <linebreak/>
 E.g. if seconds = 100 and minutes = 0, after time_f_normalize(seconds, minutes, 60) seconds = 40 and minutes = 1. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>smaller_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of smaller unit of time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>larger_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of larger unit of time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>How many of the smaller_unit are in the larger_unit (e.g. 60 seconds in 1 minute) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="67" column="6" bodyfile="uptime_formatter.c" bodystart="67" bodyend="72" declfile="uptime_formatter.c" declline="20" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a72b4da098748048d390717ed1d227b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * time_f_make_time_str</definition>
        <argsstring>(Uptime_Info *time_info)</argsstring>
        <name>time_f_make_time_str</name>
        <param>
          <type><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
<para>Given info from <ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct, creates a formatted time string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A formatted time string, readable by humans </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="81" column="6" bodyfile="uptime_formatter.c" bodystart="81" bodyend="88" declfile="uptime_formatter.c" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a56172bd6a627657fa77816f89235886c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_add_years_days_and_hours</definition>
        <argsstring>(char *time_str, Uptime_Info *time_info)</argsstring>
        <name>time_f_add_years_days_and_hours</name>
        <param>
          <type>char *</type>
          <declname>time_str</declname>
        </param>
        <param>
          <type><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
<para>Adds years, days, and hours to formatted time string, but will only add each if they are greater than 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_str</parametername>
</parameternamelist>
<parameterdescription>
<para>time string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="96" column="6" bodyfile="uptime_formatter.c" bodystart="96" bodyend="102" declfile="uptime_formatter.c" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a13a59031c91b931cd88b5d463c7264c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_add_minutes_and_seconds</definition>
        <argsstring>(char *time_str, Uptime_Info *time_info)</argsstring>
        <name>time_f_add_minutes_and_seconds</name>
        <param>
          <type>char *</type>
          <declname>time_str</declname>
        </param>
        <param>
          <type><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
<para>Adds minutes and seconds to formatted time string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_str</parametername>
</parameternamelist>
<parameterdescription>
<para>time string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>time_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="110" column="6" bodyfile="uptime_formatter.c" bodystart="110" bodyend="114" declfile="uptime_formatter.c" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a55983cd83f9281c5d1c1291a00192273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_add_time_to_str</definition>
        <argsstring>(char *time_str, int time, char *unit_str, bool always_add)</argsstring>
        <name>time_f_add_time_to_str</name>
        <param>
          <type>char *</type>
          <declname>time_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>time</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>unit_str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>always_add</declname>
        </param>
        <briefdescription>
<para>If time is greater than 0, or we are always supposed to add the string, adds a string with the format. </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted> time unit_str </preformatted> to time_str.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_str</parametername>
</parameternamelist>
<parameterdescription>
<para>time string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time</parametername>
</parameternamelist>
<parameterdescription>
<para>time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unit_str</parametername>
</parameternamelist>
<parameterdescription>
<para>unit string - essentially, something we concat onto the formatted time </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">always_add</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to always add this string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="124" column="6" bodyfile="uptime_formatter.c" bodystart="124" bodyend="134" declfile="uptime_formatter.c" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="uptime__formatter_8c_1a8e50fd481f376da0a616562615ea9822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void time_f_log_info</definition>
        <argsstring>(Uptime_Info *time_info)</argsstring>
        <name>time_f_log_info</name>
        <param>
          <type><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> *</type>
          <declname>time_info</declname>
        </param>
        <briefdescription>
<para>Convenience function, for debugging. Logs all info from <ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="uptime_formatter.c" line="141" column="6" bodyfile="uptime_formatter.c" bodystart="141" bodyend="150" declfile="uptime_formatter.c" declline="26" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;uptime_formatter.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_f_get_time_str(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_init_uptime_info(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_normalize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*smaller_unit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*larger_unit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_f_make_time_str(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_years_days_and_hours(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_minutes_and_seconds(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_time_to_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unit_str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>always_add);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_log_info(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_f_get_time_str(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>time_info<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_init_uptime_info(&amp;time_info,<sp/>time);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time_f_make_time_str(&amp;time_info);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_init_uptime_info(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>time)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>time_info-&gt;seconds<sp/>=<sp/>(int)time;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_normalize(&amp;(time_info-&gt;seconds),<sp/>&amp;(time_info-&gt;minutes),<sp/>60);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_normalize(&amp;(time_info-&gt;minutes),<sp/>&amp;(time_info-&gt;hours),<sp/>60);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_normalize(&amp;(time_info-&gt;hours),<sp/>&amp;(time_info-&gt;days),<sp/>24);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_normalize(&amp;(time_info-&gt;days),<sp/>&amp;(time_info-&gt;years),<sp/>365);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_normalize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*smaller_unit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*larger_unit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>base)</highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>*larger_unit<sp/>=<sp/>*smaller_unit<sp/>/<sp/>base;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>*smaller_unit<sp/>%=<sp/>base;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_f_make_time_str(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>time_str[512]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_years_days_and_hours(time_str,<sp/>time_info);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_minutes_and_seconds(time_str,<sp/>time_info);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(time_str);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_years_days_and_hours(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_time_to_str(time_str,<sp/>time_info-&gt;years,<sp/></highlight><highlight class="stringliteral">&quot;years,<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_time_to_str(time_str,<sp/>time_info-&gt;days,<sp/></highlight><highlight class="stringliteral">&quot;days,<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_time_to_str(time_str,<sp/>time_info-&gt;hours,<sp/></highlight><highlight class="stringliteral">&quot;hours,<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_minutes_and_seconds(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/><ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_time_to_str(time_str,<sp/>time_info-&gt;minutes,<sp/></highlight><highlight class="stringliteral">&quot;minutes,<sp/>&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>time_f_add_time_to_str(time_str,<sp/>time_info-&gt;seconds,<sp/></highlight><highlight class="stringliteral">&quot;seconds&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_add_time_to_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*time_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>time,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unit_str,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>always_add)</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(always_add<sp/>||<sp/>time<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>time_unit_str[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(time_unit_str,<sp/></highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>time);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(time_unit_str,<sp/>unit_str);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcat(time_str,<sp/>time_unit_str);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>time_f_log_info(<ref refid="structUptime__Info" kindref="compound">Uptime_Info</ref><sp/>*time_info)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;STATS:\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;seconds:<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;minutes:<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;hours:<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;days:<sp/>%d\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t-&gt;years:<sp/>%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time_info-&gt;seconds,<sp/>time_info-&gt;minutes,<sp/>time_info-&gt;hours,<sp/>time_info-&gt;days,<sp/>time_info-&gt;years);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="uptime_formatter.c"/>
  </compounddef>
</doxygen>
