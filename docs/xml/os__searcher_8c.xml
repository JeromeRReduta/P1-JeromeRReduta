<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="os__searcher_8c" kind="file" language="C++">
    <compoundname>os_searcher.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="logger_8h" local="yes">logger.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="procfs_8h" local="yes">procfs.h</includes>
    <includes refid="string__extractor_8h" local="yes">string_extractor.h</includes>
    <includes refid="os__searcher_8h" local="yes">os_searcher.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="10">
        <label>procfs.h</label>
        <link refid="procfs_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="14">
        <label>task_adder.h</label>
        <link refid="task__adder_8h_source"/>
      </node>
      <node id="1">
        <label>os_searcher.c</label>
        <link refid="os__searcher_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>os_searcher.h</label>
        <link refid="os__searcher_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>sys/types.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>util.h</label>
        <link refid="util_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>unistd.h</label>
      </node>
      <node id="5">
        <label>logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>string_extractor.h</label>
        <link refid="string__extractor_8h"/>
      </node>
      <node id="13">
        <label>task_finder.h</label>
        <link refid="task__finder_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="os__searcher_8c_1af731dd1ed6cd0e31d5e1d99d6835a448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * search_file_first_line</definition>
        <argsstring>(const char *base, const char *extension)</argsstring>
        <name>search_file_first_line</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <briefdescription>
<para>Searches for the file proc_dir/extension and returns the first line as a string. </para>
        </briefdescription>
        <detaileddescription>
<para>This file has no vars Func prototypes</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">&lt;br&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the file proc_dir/extensions exists and is not empty, return first line. Else, return NULL</para>
</simplesect>
Searches for the file in base/extension and returns the first line</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the file base/extension exists and is not empty, return first line. Else, return NULL.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="202" column="6" bodyfile="os_searcher.c" bodystart="202" bodyend="218" declfile="os_searcher.c" declline="21" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1adf435404b7826cd81e180192764c702a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * search_file_with_key</definition>
        <argsstring>(const char *base, const char *extension, const char *key)</argsstring>
        <name>search_file_with_key</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Searches the file base/extension, and returns the first line containing key, up to buf_sz bytes. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buf_sz</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>search key</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If base/extension exists and contains a line with key, returns that line. Otherwise, returns NULL</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="232" column="6" bodyfile="os_searcher.c" bodystart="232" bodyend="261" declfile="os_searcher.c" declline="22" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1acf2e205c23138da558fd5597c52eec98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * search_passwd_for_uid</definition>
        <argsstring>(char *uid_str, int fd)</argsstring>
        <name>search_passwd_for_uid</name>
        <param>
          <type>char *</type>
          <declname>uid_str</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Searches /etc/passwd for the string containing the given uid. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">uid</parametername>
</parameternamelist>
<parameterdescription>
<para>uid</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If /etc/passwd exists, and has a line containing the given uid (in the 3rd column), returns the owner of that line, else returns NULL.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="351" column="6" bodyfile="os_searcher.c" bodystart="351" bodyend="363" declfile="os_searcher.c" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a3391b053c2f543a825da3c54750ced24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void search_file_for_memory_usage</definition>
        <argsstring>(const char *base, const char *extension, char *avail_buf, char *total_buf)</argsstring>
        <name>search_file_for_memory_usage</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>avail_buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>total_buf</declname>
        </param>
        <briefdescription>
<para>Searches the file base/extension for MemAvailable data and MemTotal data, and if it finds them copies them into their respective buffers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avail_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for MemAvailable data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>total_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for MemTotal data </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="272" column="6" bodyfile="os_searcher.c" bodystart="272" bodyend="300" declfile="os_searcher.c" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1abd264b85b18e6eea4c1ba99b51effc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void search_file_for_task_stats</definition>
        <argsstring>(const char *base, const char *extension, Task_Status_File_Info *status_file_info)</argsstring>
        <name>search_file_for_task_stats</name>
        <param>
          <type>const char *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>extension</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Searches base/extension for process stats, adding info it finds to status_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>base path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">extension</parametername>
</parameternamelist>
<parameterdescription>
<para>extension path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="309" column="6" bodyfile="os_searcher.c" bodystart="309" bodyend="338" declfile="os_searcher.c" declline="25" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a05adfd7f263978302b2de2e1dda15108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool contains_uid_str</definition>
        <argsstring>(char *lineread_buf, char *uid_str)</argsstring>
        <name>contains_uid_str</name>
        <param>
          <type>char *</type>
          <declname>lineread_buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>uid_str</declname>
        </param>
        <briefdescription>
<para>Tells whether or not lineread_buf contains a given uid_str. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lineread_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The lineread buffer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">fd</parametername>
</parameternamelist>
<parameterdescription>
<para>{ parameter_description } </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uid_str</parametername>
</parameternamelist>
<parameterdescription>
<para>The uid string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>{ description_of_the_return_value } </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="374" column="6" bodyfile="os_searcher.c" bodystart="374" bodyend="381" declfile="os_searcher.c" declline="26" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a20d1fde9d00ad59859b3b50f0bb56b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_hostname</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_hostname</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for hostname. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the hostname of the OS, or NULL on error</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="37" column="6" bodyfile="os_searcher.c" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1ada87cd6a0df97ed040318f1831b089bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_kernel</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_kernel</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its kernel name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the kernel name of the OS, or NULL on error.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="51" column="6" bodyfile="os_searcher.c" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a2af8b12249b253dadb4e3759ac8b3852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_model</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_model</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its cpu model name. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string representing the cpu model name of the OS, or NULL on error.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="65" column="6" bodyfile="os_searcher.c" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a8c047462ae3a544af44b78d17a41002a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_cores</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_cores</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for how many cpu cores it has. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/cpuinfo about how many cpu cores this OS has</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="79" column="6" bodyfile="os_searcher.c" bodystart="79" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a9e117bfa65d4af8cf09078bc74ed92f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_uptime</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_uptime</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for how long it&apos;s been running. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/uptime representing how long this OS has been running, or NULl on error</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="93" column="6" bodyfile="os_searcher.c" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1afe7485ae167d93d7d035ea07f302ceaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_load_avg</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_load_avg</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its load average values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/loadavg representing its load average values.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="107" column="6" bodyfile="os_searcher.c" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1a3e83f8454ff080867dcb78b8830b9540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_uname</definition>
        <argsstring>(char *uid_str)</argsstring>
        <name>search_for_uname</name>
        <param>
          <type>char *</type>
          <declname>uid_str</declname>
        </param>
        <briefdescription>
<para>Given a UID as a string, searches for the associated username in /etc/passwd. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uid_str</parametername>
</parameternamelist>
<parameterdescription>
<para>UID, as a string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the username associated with uid_str, or NULL on error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="119" column="6" bodyfile="os_searcher.c" bodystart="119" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1aa3a3b5f15dd4e1899f8e638b9623c239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* search_for_cpu_usage</definition>
        <argsstring>(char *proc_dir)</argsstring>
        <name>search_for_cpu_usage</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its cpu usage numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the line from proc_dir/stat representing its cpu usage numbers.</para>
</simplesect>
<simplesect kind="note"><para>This func allocates memory. Must free() later. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="139" column="6" bodyfile="os_searcher.c" bodystart="139" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1af7ddb18d974ffd3304151a1ebe8cf439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int search_for_mem_info</definition>
        <argsstring>(char *proc_dir, char *mem_avail_buf, char *mem_total_buf)</argsstring>
        <name>search_for_mem_info</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>mem_avail_buf</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>mem_total_buf</declname>
        </param>
        <briefdescription>
<para>Searches the OS for its memory usage numbers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem_avail_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to copy the line holding &quot;MemAvailable&quot; data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mem_total_buf</parametername>
</parameternamelist>
<parameterdescription>
<para>A buffer to copy the line holding &quot;MemTotal&quot; data</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on FAILURE, 1 on SUCCESS</para>
</simplesect>
<simplesect kind="note"><para>Decided to use two buffers instead of allocating memory, and decided to read both values at once, due to bug w/ search_file_for_memory_usage() and maybe lineread(). If I try to read the same file twice, it seems that the functions don&apos;t read from the top, and will go into the next mem_info file if necessary. This causes values from Test N + 1 to show up in Test N. Using two buffers solves this problem. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="158" column="5" bodyfile="os_searcher.c" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="os__searcher_8c_1ac2d91bb090d1533fe2499469095e012b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void search_for_task_info</definition>
        <argsstring>(char *proc_dir, char *entry_name, Task_Status_File_Info *status_file_info)</argsstring>
        <name>search_for_task_info</name>
        <param>
          <type>char *</type>
          <declname>proc_dir</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>entry_name</declname>
        </param>
        <param>
          <type><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> *</type>
          <declname>status_file_info</declname>
        </param>
        <briefdescription>
<para>Searches proc for a given task entry_name, and stores info from proc/entry_name/status into status_file_info. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proc_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>proc directory </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry_name</parametername>
</parameternamelist>
<parameterdescription>
<para>entry name </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_file_info</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="os_searcher.c" line="172" column="6" bodyfile="os_searcher.c" bodystart="172" bodyend="180"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logger_8h" kindref="compound">logger.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="procfs_8h" kindref="compound">procfs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__extractor_8h" kindref="compound">string_extractor.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;os_searcher.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_first_line(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_with_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_passwd_for_uid(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_file_for_memory_usage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*avail_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*total_buf);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_file_for_task_stats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains_uid_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lineread_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_hostname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_first_line(proc_dir,<sp/>pfs_hostname_path);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_kernel(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_first_line(proc_dir,<sp/>pfs_kernel_path);</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_model(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_with_key(proc_dir,<sp/>pfs_cpu_path,<sp/></highlight><highlight class="stringliteral">&quot;model<sp/>name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_cores(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_with_key(proc_dir,<sp/>pfs_cpu_path,<sp/></highlight><highlight class="stringliteral">&quot;siblings&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_uptime(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_first_line(proc_dir,<sp/>pfs_uptime_path);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_load_avg(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="108"><highlight class="normal">{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_first_line(proc_dir,<sp/>pfs_load_avg_path);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_uname(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open_path(</highlight><highlight class="stringliteral">&quot;/etc&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;passwd&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uname<sp/>=<sp/><sp/>uid_str<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>fd<sp/>!=<sp/>-1<sp/>?<sp/>search_passwd_for_uid(uid_str,<sp/>fd)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uname;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_for_cpu_usage(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>search_file_first_line(proc_dir,<sp/>pfs_cpu_usage_path);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>search_for_mem_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_avail_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_total_buf)</highlight></codeline>
<codeline lineno="159"><highlight class="normal">{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>search_file_for_memory_usage(proc_dir,<sp/>pfs_mem_usage_path,<sp/>mem_avail_buf,<sp/>mem_total_buf);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!strlen(mem_avail_buf)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!strlen(mem_total_buf)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_for_task_info(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*proc_dir,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*entry_name,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(status_file_info-&gt;pid_buf,<sp/>entry_name);<sp/></highlight><highlight class="comment">//<sp/>pid<sp/>value<sp/>is<sp/>already<sp/>entry_name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>extension[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>sprintf(extension,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>entry_name,<sp/></highlight><highlight class="stringliteral">&quot;/status&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>search_file_for_task_stats(proc_dir,<sp/>extension,<sp/>status_file_info);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_first_line(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension)</highlight></codeline>
<codeline lineno="203"><highlight class="normal">{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open_path(base,<sp/>extension);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;PATH:<sp/>&apos;%s/%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>base,<sp/>extension);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>OPEN_PATH()<sp/>FAILED<sp/>-<sp/>RETURNING<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lineread_buf[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>read_size<sp/>=<sp/>lineread(fd,<sp/>lineread_buf,<sp/>255);<sp/></highlight><highlight class="comment">//<sp/>buf_sz<sp/>-<sp/>1<sp/>so<sp/>last<sp/>char<sp/>in<sp/>buf<sp/>is<sp/>\0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_size<sp/>&gt;<sp/>0<sp/>?<sp/>strdup(lineread_buf)<sp/>:<sp/>NULL;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_file_with_key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>NULL<sp/>KEY<sp/>-<sp/>RETURNING<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open_path(base,<sp/>extension);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>OPEN_PATH()<sp/>FAILED<sp/>-<sp/>RETURNING<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lineread_buf[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>read_size;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(read_size<sp/>=<sp/>lineread(fd,<sp/>lineread_buf,<sp/>256))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key_name<sp/>=<sp/>strstr(lineread_buf,<sp/>key);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key_name<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;FOUND<sp/>KEY:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>key_name);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(lineread_buf);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;CANNOT<sp/>FIND<sp/>KEY<sp/>-<sp/>RETURNING<sp/>NULL\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_file_for_memory_usage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*avail_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*total_buf)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open_path(base,<sp/>extension);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>OPEN_PATH()<sp/>FAILED<sp/>-<sp/>RETURNING\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lineread_buf[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>read_size;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(read_size<sp/>=<sp/>lineread(fd,<sp/>lineread_buf,<sp/>256))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_avail<sp/>=<sp/>strstr(lineread_buf,<sp/></highlight><highlight class="stringliteral">&quot;MemAvailable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*mem_total<sp/>=<sp/>strstr(lineread_buf,<sp/></highlight><highlight class="stringliteral">&quot;MemTotal&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_avail<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;FOUND<sp/>KEY:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>mem_avail);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(avail_buf,<sp/>mem_avail);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mem_total<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a388edf12256bf73c3a8ee9734c3bd841" kindref="member">LOG</ref>(</highlight><highlight class="stringliteral">&quot;FOUND<sp/>KEY:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>mem_total);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(total_buf,<sp/>mem_total);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>search_file_for_task_stats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*extension,<sp/><ref refid="structTask__Status__File__Info" kindref="compound">Task_Status_File_Info</ref><sp/>*status_file_info)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>open_path(base,<sp/>extension);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fd<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ac60a33fb6244dfed75a5aaab504b8968" kindref="member">LOGP</ref>(</highlight><highlight class="stringliteral">&quot;ERROR<sp/>-<sp/>OPEN_PATH()<sp/>FAILED<sp/>-<sp/>RETURNING\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lineread_buf[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>read_size;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>(read_size<sp/>=<sp/>lineread(fd,<sp/>lineread_buf,<sp/>256))<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str<sp/>=<sp/>strstr(lineread_buf,<sp/></highlight><highlight class="stringliteral">&quot;Uid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name_str<sp/>=<sp/>strstr(lineread_buf,<sp/></highlight><highlight class="stringliteral">&quot;Name&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*state_str<sp/>=<sp/>strstr(lineread_buf,<sp/></highlight><highlight class="stringliteral">&quot;State&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uid_str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(status_file_info-&gt;uid_buf,<sp/>uid_str,<sp/>256);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name_str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(status_file_info-&gt;name_buf,<sp/>name_str,<sp/>256);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state_str<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(status_file_info-&gt;state_buf,<sp/>state_str,<sp/>256);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>close(fd);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*search_passwd_for_uid(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lineread_buf[256]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lineread(fd,<sp/>lineread_buf,<sp/>256)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>found<sp/>uid_str</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contains_uid_str(lineread_buf,<sp/>uid_str))<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strdup(lineread_buf);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Case:<sp/>No<sp/>uid_str<sp/>in<sp/>/etc/passwd</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>contains_uid_str(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*lineread_buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid_str)</highlight></codeline>
<codeline lineno="375"><highlight class="normal">{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*next<sp/>=<sp/>lineread_buf;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*current;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>current<sp/>=<sp/><ref refid="string__extractor_8h_1ab4c953c32150dfa62ca4bf482ea40d6b" kindref="member">extract_nth_token</ref>(3,<sp/>&amp;current,<sp/>&amp;next,<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strcmp(current,<sp/>uid_str)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="os_searcher.c"/>
  </compounddef>
</doxygen>
