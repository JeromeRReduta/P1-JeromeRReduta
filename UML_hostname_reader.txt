UML for hostname_reader.txt:

hostname_reader: File that holds and acts on a representation of this OS's hostname

Vars:

		host_r_globals: Host_R_Public_Data* // Holds global vars:

			+ hostname: char* // the hostname of OS, used for displaying in display.c - 

		
		host_r_locals: Host_R_Private_Data* // Holds local vars:

			- proc_dir: char* // proc directory string

			- buf_sz: size_t // buffer size, mostly used for lineread - same as buf_sz from procfs



		c host_r_path: const char* // path of hostname file

Funcs:

		+ host_r_init_data(char *proc_dir, size_t buf_sz):

			Inits pub and private structs, including copying  proc_dir and buf_sz values from procfs to this file

			This includes searching for hostname (i.e. host_r_get_hostname())

		+ host_r_safe_init_data(char *proc_dir, size_t buf_sz):

			same as init(), but only if vars haven't been initialized (if var structs == NULL)

		+ host_r_destroy_data():

			 resets pub and private struct data, including freeing memory structs and setting them to NULL

			 const vars are unaffected

		- host_r_reset_struct_internals():
			Helper func for destroy_data()
			Frees dynamically allocated mem for struct's internal members

		- host_r_reset_ptrs():
			Helper func for destroy_data()
			Frees and nulls public and private data structs

		- host_r_search():

			only called by init_data()

			searches host_r_path for host name and sets globals->hostname to that value

